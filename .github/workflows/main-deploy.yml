name: '[PRD] Build and Deploy to EKS'

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.build-image.outputs.tag }}
    
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}


      - name: Fazer login no Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Configurar JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Fazer o Build com Maven
        run: mvn -B package --file pom.xml

      - name: Construir, Taguear e Enviar imagem para o ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -x
          if [ -z "$ECR_REPOSITORY" ]; then
            echo "Error: ECR_REPOSITORY secret is not set."
            exit 1
          fi
          if [ -z "$ECR_REGISTRY" ]; then
            echo "Error: ECR_REGISTRY is empty. Login to ECR might have failed."
            exit 1
          fi
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          echo "IMAGE_TAG: $IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
  Deploy-to-EKS:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          #role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_ARN }}
          role-to-assume: arn:aws:iam::239409137076:role/role-eks-apply
          aws-region: ${{ secrets.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Install kubectl
        run: |
          curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.5/2024-01-04/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
          echo '$HOME/bin' >> $GITHUB_PATH

        
      - name: Ler nome do cluster do arquivo de ambiente
        id: get_cluster_name
        run: |
          CLUSTER_NAME=$(grep -A 1 "prod:" infra/ambiente.yml | tail -n 1 | awk '{print $2}')
          echo "name=$CLUSTER_NAME" >> $GITHUB_OUTPUT

      - name: Configurar kubectl para o cluster EKS
        run: |
          aws eks update-kubeconfig --name ${{ steps.get_cluster_name.outputs.name }} --region ${{ secrets.AWS_REGION }}


      - name: Atualizar manifesto do Kubernetes com a nova imagem
        env:
          NEW_TAG: ${{ needs.build.outputs.tag }}
        run: |
         
          sed -i "s/TAG/$NEW_TAG/g" infra/app/4_app_deployment.yml

      - name: Verificar valor da variavel imagem 
        run: |
          echo ${{ needs.build.outputs.tag }}

      - name: Fazer deploy da aplicação no EKS
        run: |
          kubectl apply -f infra/app/1_app_namespace.yml
          kubectl apply --validate=false -f infra/app
          kubectl rollout status deployment/fastfood-api-deployment -n fastfood-app --timeout=180s
          echo "Deploy realizado com sucesso!"
